@page "/"
@inject IJSRuntime JS

<PageTitle>REMATCH StratRoulette</PageTitle>

<audio id="whistleAudio" src="sounds/whistle.mp3" preload="auto"></audio>
<audio id="crowdCheerAudio" src="sounds/crowd_cheer.mp3" preload="auto"></audio>
<audio id="ballKickAudio" src="sounds/ball_kick.mp3" preload="auto"></audio>

<link rel="preload" href="images/BladeShot.gif" as="image">
<link rel="preload" href="images/CockyShot.gif" as="image">
<link rel="preload" href="images/DolphinShot.gif" as="image">
<link rel="preload" href="images/LegendaryAttacker.gif" as="image">
<link rel="preload" href="images/LegendaryDefender.gif" as="image">
<link rel="preload" href="images/OneTouch.gif" as="image">
<link rel="preload" href="images/RockFeet.gif" as="image">
<link rel="preload" href="images/Sombrero.gif" as="image">
<link rel="preload" href="images/TripleBackboard.gif" as="image">
<link rel="preload" href="images/WalkIn.gif" as="image">


<div class="splash-screen @(showSplash ? "fade-in" : "fade-out")" @onclick="PlaySoundAndFade">
    <div class="logo-wrapper">
        <div class="logo-glow"></div>
        <img src="RSR_logo.png" alt="Logo" class="logo" />
    </div>
</div>

<div class="main-content @(showSplash ? "fade-out hidden-interaction" : "fade-in")">
    <div class="carousel-container">
        <div class="carousel-track" @ref="carouselTrackRef">
            @foreach (var cardWithIndex in AllCards.Select((card, idx) => (card, idx)))
            {
                var card = cardWithIndex.card;
                var idx = cardWithIndex.idx;
                var isSelected = (idx == CurrentIndex);
                <div class="card @(isSelected ? "selected-card" : "")" style="background-color:@(isSelected ? "#1f5a4d" : "white")">
                <h2 class="card-title" style="color:@(isSelected ? "black" : "gray")">@card.Title</h2>
                    <img src="@(isSelected ? card.GifPath : GetStaticFrame(card.GifPath))" alt="Cool animation" class="card-image" />
                    <p class="card-text" style="color:@(isSelected ? "black" : "gray")">@card.Rules</p>

                    <!-- Dislike Icon (bottom left) -->
                    <!--<img src="images/svg_dislike.svg"
                            @onclick="() => OnDislike(card)"
                            class="svg-icon dislike-icon" />-->

                    <!-- Like Icon (bottom right) -->
                    <!--<img src="images/svg_like.svg"
                            @onclick="() => OnLike(card)"
                            class="svg-icon like-icon" />-->
                </div>
            }
        </div>
    </div>
    <button class="card-button" @onclick="SpinCarousel">Spin!</button>
</div>

<div class="fixed-button-wrapper">
    <a href="https://docs.google.com/forms/d/e/1FAIpQLSfHuE5CQU_h25V1ly3HRyxuzeh5OEB7iLIlm-Z8LCi9UXjDbg/viewform?usp=header" target="_blank" class="fixed-button submit-button">
        Submit your rule !
    </a>

    <a href="https://www.buymeacoffee.com/joustedicts" target="_blank" class="fixed-button">
        <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png"
             alt="Buy Me A Coffee"
             style="height: 60px; width: 217px;">
    </a>
</div>

<style>
    body {
        background-image: url('/images/football_field.jpg');
        background-size: cover; /* Scales the image to cover the entire screen */
        background-position: center; /* Centers the image */
        background-repeat: no-repeat; /* Prevents repeating */
        margin: 0;
        height: 100vh;
        width: 100vw;
        overflow: hidden;
    }

    .main-content {
        display: flex;
        flex-direction: column;
        align-items: center; /* This horizontally centers children */
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        width: 100vw;
        overflow: hidden;
    }

    .logo-wrapper {
        position: relative;
        display: inline-block;
    }

    .logo-glow {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 350px;
        height: 350px;
        border-radius: 50%;
        background: radial-gradient(circle, white 0%, rgba(255, 255, 255, 0) 70%);
        z-index: -1;
        pointer-events: none;
    }

    .splash-screen {
        display: flex;
        justify-content: center; /* Horizontal centering */
        align-items: center; /* Vertical centering */
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        background-color: transparent;
        transition: opacity 0.5s ease;
        z-index: 1000; /* ensure it overlays main content */
    }

    .selected-card {
        transform: scale(1.1); /* Slightly larger */
        z-index: 10;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
    }

    .fade-in {
        opacity: 1;
        pointer-events: auto;
    }

    .fade-out {
        opacity: 0;
        pointer-events: none; /* Prevent interaction when hidden */
    }

    .fixed-button-wrapper {
        position: fixed;
        bottom: 20px;
        right: 20px;
        display: flex;
        gap: 12px;
        z-index: 9999;
    }

    .fixed-button {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        text-align: center;
        text-decoration: none;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .fixed-button:hover {
            transform: scale(1.05);
        }

    .submit-button {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 60px;
        width: 217px;
        background-color: #1f5a4d; /* Green */
        color: white;
        font-size: 1.25rem;
        font-weight: bold;
        border-radius: 12px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .submit-button:hover {
            background-color: #1f5a4d;
            transform: scale(1.05);
            color: white; /* 👈 Prevents blue text on hover */
        }

    .hidden-interaction {
        pointer-events: none;
    }

    .logo {
        width: 300px;
        transition: transform 0.3s ease;
        cursor: pointer;
    }

        .logo:hover {
            transform: scale(1.3);
        }

    .title-container {
        height: 100vh; /* Full screen height */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .page-title {
        font-size: 4rem;
        font-weight: bold;
        color: #1f2937;
        text-align: center;
    }

    .card-wrapper {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;  /* THIS centers the button horizontally */
        max-width: 600px;
        width: 100%;
    }

    .card-container {
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #f3f4f6; /* light background */
    }

    .card {
        width: 400px;
        flex-shrink: 0;
        background-color: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        text-align: center;
    }

    .card-title {
        margin-bottom: 1rem;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .card-image {
        max-width: 100%;
        height: auto;
        margin-bottom: 1rem;
    }

    .card-text {
        font-size: 1rem;
        color: #555;
    }

    .carousel-container {
        width: 100vw; /* FULL SCREEN WIDTH */
        justify-content: center;
        align-items: center;
        overflow: hidden;
        position: relative;
        height: 600px;
    }

    .carousel-track {
        display: flex;
        gap: 40px;
        transition: transform 0.3s ease-out;
        will-change: transform;
        padding: 40px 0; /* Optional vertical spacing */
    }

    .card-button {
        display: block;
        padding: 1rem 2rem;
        font-size: 1.5rem;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        background-color: #1f5a4d;
        color: white;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s ease;
    }

        .card-button:hover {
            background-color: #1f5a4d;
            transform: scale(1.05);
        }

    .svg-icon
    {
        width: 24px;
        height: 24px;
        position: absolute;
        bottom: 10px;
        cursor: pointer;
        transition: transform 0.2s ease;
    }

    .svg-icon:hover {
        transform: scale(1.2);
    }

    .like-icon {
        right: 10px;
        filter: invert(45%) sepia(77%) saturate(396%) hue-rotate(90deg) brightness(90%) contrast(92%);
        /* Green-ish */
    }

    .dislike-icon {
        left: 10px;
        filter: invert(29%) sepia(84%) saturate(749%) hue-rotate(340deg) brightness(91%) contrast(92%);
        /* Red-ish */
    }
</style>

<script>
    window.carouselSpinTo = function (element, targetX, duration = 2000) {
        return new Promise((resolve) => {
            let start = null;
            let initialX = element._currentX || 0;
            let delta = targetX - initialX;

            function animate(timestamp) {
                if (!start) start = timestamp;
                let elapsed = timestamp - start;
                let progress = Math.min(elapsed / duration, 1);
                let ease = 1 - Math.pow(1 - progress, 3); // ease-out
                let currentX = initialX + delta * ease;
                element.style.transform = `translateX(${currentX}px)`;
                element._currentX = currentX;
                if (progress < 1) {
                    requestAnimationFrame(animate);
                } else {
                    resolve();
                }
            }

            requestAnimationFrame(animate);
        });
    };

    window.getWindowWidth = function () {
        return window.innerWidth;
    };

    function playClickSound() {
        var audio1 = document.getElementById('whistleAudio');
        var audio2 = document.getElementById('crowdCheerAudio');

        if (audio1) {
            audio1.currentTime = 0;
            audio1.volume = 0.5; // Set whistle volume to 50%
            audio1.play();
        }

        if (audio2) {
            setTimeout(() => {
                audio2.currentTime = 0;
                audio2.volume = 0.5; // Set whistle volume to 50%
                audio2.play();
            }, 300);  // 500 milliseconds delay
        }
    }

    function playKickSound() {
        var audio1 = document.getElementById('ballKickAudio');

        if (audio1) {
            audio1.currentTime = 0;
            audio1.play();
        }
    }
</script>

<script data-goatcounter="https://joustedicts.goatcounter.com/count"
        async src="//gc.zgo.at/count.js"></script>

@inject IJSRuntime JS

@code {
    private ElementReference carouselTrackRef;
    private int cardWidth = 400; // 400px card + 40px gap
    private int cardGap = 40; // 400px card + 40px gap
    private int CurrentIndex = 0;
    private bool showCard = true;
    private Models.Card CurrentCard = new();
    private List<Models.Card> AllCards = new();
    private bool showSplash = true;

    private Random _rand = new();

    protected override void OnInitialized()
    {
        InitliazeCards();
        base.OnInitialized();
    }

    private string GetStaticFrame(string gifPath)
    {
        if (string.IsNullOrEmpty(gifPath))
            return "";

        return gifPath.Replace(".gif", ".png"); // assuming your PNGs have the same name as GIFs
    }

    private async Task SpinCarousel()
    {
        int nextIndex;
        var rand = new Random();
        do
        {
            nextIndex = rand.Next(AllCards.Count);
        } while (nextIndex == CurrentIndex); // prevent same index

        await JS.InvokeVoidAsync("playKickSound");

        // Get viewport width from JS
        int windowWidth = await JS.InvokeAsync<int>("getWindowWidth");

        // Total width per card includes ONE gap (between cards)
        int cardSpacing = cardWidth + cardGap;

        // Center offset based on window size
        int centerOffset = (windowWidth / 2) - (cardWidth / 2);

        // Target offset (negative) to bring the desired card to center
        int targetOffset = -(nextIndex * cardSpacing) + centerOffset;

        await JS.InvokeVoidAsync("carouselSpinTo", carouselTrackRef, targetOffset, 1500);

        CurrentIndex = nextIndex;
    }

    private async Task PlaySoundAndFade()
    {
        // Play the sound using JS interop
        await JS.InvokeVoidAsync("playClickSound");

        // Start fade out (your existing logic)
        showSplash = false;
    }

    private async Task OnLike(Models.Card? card)
    {
        
    }

    private async Task OnDislike(Models.Card? card)
    {

    }

    private async Task OnStratButtonClick()
    {
        showCard = false;
        CurrentCard.GifPath = null;

        int nextIndex = _rand.Next(AllCards.Count);

        if (nextIndex == CurrentIndex)
            nextIndex = (CurrentIndex + 1) % (AllCards.Count - 1);

        CurrentIndex = nextIndex;
        CurrentCard = AllCards[CurrentIndex];
        StateHasChanged();
        Console.WriteLine($"New Card: {CurrentCard.Title}");
        await Task.Delay(25);
        showCard = true;
    }

    private void InitliazeCards()
    {
        Models.Card dolphinShot = new();
        dolphinShot.GifPath = "images/DolphinShot.gif";
        dolphinShot.Title = "Dolphin Shot";
        dolphinShot.Rules = "Your next goal MUST be made with a Dolphin Shot !";

        Models.Card bladeShot = new();
        bladeShot.GifPath = "images/BladeShot.gif";
        bladeShot.Title = "Blade Shot";
        bladeShot.Rules = "Your next goal MUST be made with a Blade Shot !";

        Models.Card cockyShot = new();
        cockyShot.GifPath = "images/CockyShot.gif";
        cockyShot.Title = "Cocky Shot";
        cockyShot.Rules = "Your next goal MUST be made with a Cocky Shot !";

        Models.Card oneTouch = new();
        oneTouch.GifPath = "images/OneTouch.gif";
        oneTouch.Title = "Burning Ball";
        oneTouch.Rules = "Until your next goal, you can only touch the ball once ! If you control the ball, you must leave it.";

        Models.Card tripleBackBoard = new();
        tripleBackBoard.GifPath = "images/TripleBackboard.gif";
        tripleBackBoard.Title = "Triple Backboard";
        tripleBackBoard.Rules = "Your next goal MUST be made with three back-to-back backboard hits !";

        Models.Card walkIn = new();
        walkIn.GifPath = "images/WalkIn.gif";
        walkIn.Title = "Walk In";
        walkIn.Rules = "Your next goal MUST be made by walking in the net !";

        Models.Card legendaryAttacker = new();
        legendaryAttacker.GifPath = "images/LegendaryAttacker.gif";
        legendaryAttacker.Title = "Legendary Striker";
        legendaryAttacker.Rules = "Only one player may be in the opposing half of the field at any time !";

        Models.Card legendaryDefender = new();
        legendaryDefender.GifPath = "images/LegendaryDefender.gif";
        legendaryDefender.Title = "Legendary Defender";
        legendaryDefender.Rules = "Only one player may be in the friendly half of the field at any time (excluding the goalie) !";

        Models.Card sombrero = new();
        sombrero.GifPath = "images/Sombrero.gif";
        sombrero.Title = "Sombrero";
        sombrero.Rules = "Your next goal MUST be made by a sombrero dribble !";

        Models.Card rockFeet = new();
        rockFeet.GifPath = "images/RockFeet.gif";
        rockFeet.Title = "Rock Feet";
        rockFeet.Rules = "You can only pass or shoot using the powershot !";

        AllCards.Add(dolphinShot);
        AllCards.Add(bladeShot);
        AllCards.Add(cockyShot);
        AllCards.Add(oneTouch);
        AllCards.Add(tripleBackBoard);
        AllCards.Add(walkIn);
        AllCards.Add(legendaryAttacker);
        AllCards.Add(legendaryDefender);
        AllCards.Add(sombrero);
        AllCards.Add(rockFeet);

        CurrentCard = AllCards[_rand.Next(AllCards.Count)];
    }
}